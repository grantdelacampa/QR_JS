 export function getSmallestQRVersion(inputSize, mode, errorCorrection){
    const capacityArray = getMaxCapacity(mode, errorCorrection);
    for(let i = 0; i <= 40; i++){
      if(capacityArray[i] >= inputSize){
        return [i+1, capacityArray[i]];
      }
    }
  }
  
  function getMaxCapacity(mode, errorCorrection) {
    var capacities = {
      "numeric": {
        "L": [41, 77, 127, 187, 255, 322, 370, 461, 552, 652, 772, 883, 1022, 1101, 1250, 1408, 1548, 1725, 1903, 2061, 2232, 2409, 2620, 2812, 3057, 3283, 3517, 3669, 3909, 4158, 4417, 4686, 4965, 5253, 5529, 5836, 6153, 6479, 6743, 7089],
        "M": [34, 63, 101, 149, 202, 255, 293, 365, 432, 513, 604, 691, 796, 871, 991, 1082, 1212, 1346, 1500, 1600, 1708, 1872, 2059, 2188, 2395, 2544, 2701, 2857, 3035, 3289, 3486, 3693, 3909, 4134, 4343, 4588, 4775, 5039, 5313, 5596, 5877],
        "Q": [27, 48, 77, 111, 144, 178, 207, 259, 312, 364, 427, 489, 580, 621, 703, 775, 876, 948, 1063, 1159, 1224, 1358, 1468, 1588, 1718, 1804, 1933, 2085, 2181, 2358, 2473, 2670, 2805, 2949, 3081, 3244, 3417, 3599, 3791, 3993],
        "H": [17, 34, 58, 82, 106, 139, 154, 202, 235, 288, 331, 374, 427, 468, 530, 602, 674, 746, 813, 919, 969, 1056, 1108, 1228, 1286, 1425, 1501, 1581, 1677, 1782, 1897, 2022, 2157, 2301, 2434, 2566, 2702, 2812, 2956, 3122]
      },
      "alphanumeric": {
        "L": [
          25, 47, 77, 114, 154, 195, 224, 279, 335, 395, 468, 535, 619, 667, 758, 854, 938, 1046, 1153,
          1249, 1352, 1460, 1588, 1704, 1853, 1990, 2132, 2223, 2369, 2520, 2677, 2840, 3009, 3183, 3351,
          3537, 3729, 3927, 4087, 4296, 4482, 4686
        ],
        "M": [
          20, 38, 61, 90, 122, 154, 178, 221, 262, 311, 366, 419, 483, 528, 600, 656, 734, 816, 909, 970,
          1035, 1134, 1248, 1326, 1451, 1542, 1637, 1732, 1840, 1952, 2068, 2188, 2303, 2431, 2563, 2699,
          2809, 2953, 3180, 3350, 3534, 3722, 3924, 4088, 4296
        ],
        "Q": [
          16, 29, 47, 67, 91, 114, 131, 163, 191, 231, 267, 308, 359, 397, 442, 488, 528, 600, 656, 720,
          784, 842, 902, 940, 1002, 1066, 1132, 1201, 1273, 1347, 1417, 1496, 1577, 1661, 1729, 1817, 1919,
          1988, 2096, 2212, 2332, 2456, 2584, 2716
        ],
        "H": [
          13, 25, 41, 61, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624, 666,
          711, 779, 857, 911, 997, 1059, 1125, 1190, 1264, 1370, 1468, 1531, 1631, 1735, 1843, 1955, 2071,
          2191, 2306, 2434, 2566, 2702, 2812, 2956
        ]
      },
      "byte": {
        "L": [
          19, 34, 55, 80, 108, 136, 156, 194, 232, 274, 324, 370, 428, 461, 523, 589, 647, 721, 795, 861,
          932, 1006, 1094, 1174, 1276, 1370, 1468, 1531, 1631, 1735, 1843, 1955, 2071, 2191, 2306, 2434,
          2566, 2702, 2812, 2956
        ],
        "M": [
          16, 28, 44, 64, 86, 108, 124, 154, 182, 216, 254, 290, 334, 365, 415, 453, 507, 563, 627, 669,
          714, 782, 860, 914, 1000, 1062, 1128, 1193, 1267, 1373, 1455, 1541, 1631, 1725, 1812, 1914,
          1992, 2102, 2216, 2334
        ],
        "Q": [
          13, 22, 34, 48, 62, 76, 88, 110, 132, 154, 180, 206, 244, 261, 295, 325, 367, 397, 445, 485,
          512, 568, 614, 664, 718, 754, 808, 871, 911, 985, 1033, 1115, 1171, 1231, 1286, 1354, 1426,
          1502, 1582, 1666
        ],
        "H": [
          9, 16, 26, 36, 46, 60, 66, 86, 100, 122, 140, 158, 180, 197, 223, 253, 283, 313, 341, 385,
          406, 442, 464, 514, 538, 596, 628, 661, 701, 745, 793, 845, 901, 961, 986, 1054, 1096, 1142,
          1222, 1276
        ]
      },
      "kanji": {
          'L': [
            17, 32, 53, 78, 106, 134, 154, 192, 230, 271, 321, 367, 425, 458, 520, 586, 644, 718, 792, 858, 929, 1003, 1091, 1171, 1273, 1367, 1465, 1528, 1628, 1732, 1840, 1952, 2068, 2188, 2303, 2431, 2563, 2699, 2809, 2953, 3101, 3251, 3405, 3561, 3721, 3893, 4067, 4243, 4423, 4605, 4801, 4999, 5199, 5401
          ],
          'M': [
            14, 26, 42, 62, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624, 666, 711, 779, 857, 911, 997, 1059, 1125, 1190, 1264, 1370, 1468, 1531, 1631, 1735, 1843, 1955, 2071, 2191, 2306, 2434, 2566, 2702, 2812, 2956, 3094, 3234, 3378, 3526, 3676, 3830, 3986, 4146, 4308
          ],
          'Q': [
            11, 20, 32, 46, 60, 74, 86, 108, 130, 151, 177, 203, 241, 258, 292, 322, 364, 394, 442, 482, 509, 565, 611, 661, 715, 751, 805, 868, 908, 982, 1030, 1112, 1168, 1228, 1283, 1351, 1423, 1499, 1579, 1663, 1725, 1812, 1914, 1992, 2102, 2216, 2334, 2454, 2577, 2704, 2812, 2956, 3081
          ],
          'H': [
            7, 14, 24, 34, 44, 58, 64, 84, 98, 119, 137, 155, 177, 194, 220, 250, 280, 310, 338, 382, 403, 439, 461, 511, 535, 593, 625, 658, 698, 742, 790, 842, 898, 958, 983, 1051, 1093, 1139, 1219, 1273, 1331, 1391, 1435
          ]
      },
    }
    return capacities[mode][errorCorrection];
  }

  export function getModeIndicator(mode){
    switch(mode){
      case "numeric":
        return "0001";
      case "alphanumeric":
        return "0010";
      case "byte":
        return "0100";
      case "kanji":
        return "0111";
    }
  }

  export function getBitLength(mode, versionNum){
    let base;
    switch (mode){
      case "numeric":
        base = 10;
        break;
      case "alphanumeric":
        base = 9;
        break;
      case "byte":
        base = 8;
        break;
      case "kanji":
        base = 8;
        break;
    }
    return  base + (Math.floor(versionNum / 10) * 2)
  }